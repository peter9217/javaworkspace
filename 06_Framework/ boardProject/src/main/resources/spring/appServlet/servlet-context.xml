<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<!-- DispatcherServlet 생성 시 필요한 내용을 정의하는 파일 
		 HandlerMapping : 어떤 요청을 어떤 클래스/메서드로 연결하는지 제어하는 객체
		<annotation-driven @RequestMapping, @GetMapping, @postMapping을 활성화해서 HandlerMapping을 대체 />
		 
		 ViewResolver : contoller에서 경로를 줄여줌
		 component-scan : @component와 자식 어노테이션을 Bean으로 등록하는 태그
		 트랜잭션 관리자, 웹소켓, 인터셉터, 스케쥴러 -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	 <!-- webapp/resources 폴더를 HTTP GET방식 요청으로 접근할 수 있다. -->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- viewResolver -->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 
		base-package 이하에 작성된 @Component 와 자식 어노테이션 (@Controller, @Service, @Repository)이 붙은 클래스를 찾아 Bean(Spring이 관리하는 객체)으로 등록
		
		
	 -->
	<context:component-scan base-package="edu.kh.project" />
	
	<interceptors>
		<interceptor>
			<!--인터셉터가 동작할 url패턴  -->
			<mapping path="/**"/>
			<beans:bean id="boardTypeInterceptor"
						class="edu.kh.project.common.interceptor.BoardTypeInterceptor"/>
		</interceptor>
	</interceptors>
	
	<!-- 웹소켓 처리 클래스를 bean으로 등록 -->
	<beans:bean id="testHandler" class="edu.kh.project.main.model.websocket.TestWebsocketHandler"/>
	<!-- 어떤 주소로 웹소켓 요청이 오면 세션을 가로챌지 지정 -->
	<websocket:handlers>
		<websocket:mapping handler="testHandler" path="testSock"/>
		<!-- 요청 클라이언트의 세션을 가로채서 WebSocketSession에 넣어주는 역할 -->
		<websocket:handshake-interceptors>
			
			<beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
		</websocket:handshake-interceptors>
		<!-- SockJs를 이용한 웹소켓 연결 요청임을 명시 -->
		<websocket:sockjs/>
	</websocket:handlers>
	
	<beans:bean id="chatHandler" class="edu.kh.project.chatting.model.websocket.ChattingWebsocketHandler" />
	<websocket:handlers>
		<!-- websocket 매핑 주소 -->
		<websocket:mapping handler="chatHandler"
			path="/chattingSock" />

		<websocket:handshake-interceptors>
			<!-- interceptor : http통신에서 request, response를 가로채는 역할 handshake-interceptors 
				:Httpsession에 있는 값을 가로채서 WebSocketSession 넣어주는 역할 -->
			<beans:bean
				class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor" />
		</websocket:handshake-interceptors>

		<websocket:sockjs />
	</websocket:handlers> 
	
	
</beans:beans>
